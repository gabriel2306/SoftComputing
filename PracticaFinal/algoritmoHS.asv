function [allFitness,mejorFitness,solucion] = algoritmoHS(varTrain,enTrain,padres,maxIteraciones,varianza)
    %Calcular el error producido por todos los padres
    errorPadres = evaluarAux(padres,varTrain,enTrain);
    
    %Obtener el error minimo
    minimoPadres = min(errorPadres);
    
    %El mejor fitness conseguido hasta el momento es el mínimo
    mejorFitness = minimoPadres;
    
    %Vector para guardar los mejores fitness conseguidos durante la
    %ejecución
    allFitness = [];
    
    %Realizamos el algoritmo hasta el máximo de iteraciones indicado
    for j=1:maxIteraciones
        
        %Guardamos el fitness del mejor padre
        allFitness = [allFitness; mejorFitness];

        %Generamos una nueva armonia
        hijo = generarHijoRSR(padres,varianza);
        
        
        valorHijo = evaluarFuncion(hijo);
        
        [valorPeorPadres, padre]= max(valoresPadres);
        %Cambiamos al peor padre si es mejor el hijo (armonï¿½a) generado
        if(valorPeorPadres>valorHijo)
            padres{padre} = hijo;
            valoresPadres = evaluarAux(padres,nFuncion);
            [minimoPadres,posMinimoPadres] = min(valoresPadres);
            mejorFitness = minimoPadres;
            solucion = padres{posMinimoPadres};
        end
    end

end

%Genera hijo con mutación gaussiana
function [hijo] = generarHijoRSR(padres,varianza)
    %Creación de un hijo vacío
    hijo = [];
    
    %Tamaño de un solo padre
    tam = size(padres{1});
    
    %Conocer el número de padres totales
    tamColumnas = size(padres);
    tamColumnas = tamColumnas(2);
    
    for i = 1:tam(2)
        if (i==1)
           maximo = 5;
           minimo = -5;
        else
           maximo = 1;
           minimo = -1;
        end
        
        %Obtener una probabilidad
        prob = rand;
        
        %Probabilidad HMCR para generar nota
        if(prob<0.9)
            %Nota aleatoria de la misma columna de Harmony Memory
            numAleatorioFila = randi(tamColumnas);
            %Coger fila completa aleatoria
            fila = padres{numAleatorioFila};
            %Valor de la fila a introducir en el hijo
            valor = fila(i);           
        else
            %Nota aleatoria en el rango de la misma columna
            valor = minimo + (maximo-minimo)*rand;
        end
        
        %Probabilidad PAR
        if(prob<0.2)
            %Mutamos nota
            ruido = 0 + varianza*rand;
            valor = valor + ruido;
        end
        hijo = [hijo,valor];
    end 
    
    tamHijo = size(hijo);
    probCambio = rand;
    %Probabilidad RSR
    if(probCambio<0.01)
        %Reemplazamos num aleatorio de notas por un num aleatorio en el
        %rango de su misma columna
        for i=1:randi(tamHijo(2))
            posicionAleatoria = randi(tamHijo(2));
            hijo(posicionAleatoria) = rand*(maximo-minimo)+minimo;
        end
    end
end

%Evalua los padres o hijos
function errores = evaluarAux(padres,varTrain,enTrain)
    errores = [];
    tam = size(padres);
    
    for i=1:tam(2)
        enCalculada = calcularDemanda(varTrain, padres{i});
        errores = [errores, funcionMinimizar(enTrain, enCalculada)];
    end
end